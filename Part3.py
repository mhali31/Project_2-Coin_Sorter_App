# CAPSTONE PROJECT 6: COIN SORTER
# -*- coding: utf-8 -*-
# Created by: PyQt5 UI code generator 5.15.2 & QT Designer
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QWidget, QInputDialog, QDialog, QApplication, QPushButton, QLineEdit
from PyQt5.QtGui import QIcon
import Part1 as p1

# Main menu window
class Ui_MainMenu(object):
    # Function added to open single coin page
    def single_coin(self):
        self.window = QtWidgets.QDialog()
        self.ui = Ui_SingleCoin()
        self.ui.setupUi(self.window)
        self.window.show()

    # Function added to open multiple coin page
    def multiple_coin(self):
        self.window = QtWidgets.QDialog()
        self.ui = Ui_MultipleCoin()
        self.ui.setupUi(self.window)
        self.window.show()

    # Function added to open coin list pop-up window
    def show_coinlist(self):
        msg = QMessageBox()
        msg.setWindowTitle("Coin List")
        msg.setStyleSheet("QLabel{min-width: 250px;}")
        msg.setText("The coin denominations available are:\n1 - £2 (equivalent to 200p)\n1 - £1 (equivalent to 100p)\n3 - 50p\n4 - 20p\n5 - 10p")
        x = msg.exec_()

    # Function added to open set details page
    def set_details(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_SetDetails()
        self.ui.setupUi(self.window)
        self.window.show()

    # Function added to open configuration pop-up window
    def show_config(self):
        msg = QMessageBox()
        msg.setWindowTitle("Configuration Settings")
        msg.setStyleSheet("QLabel{min-width: 300px;}")
        msg.setText(f"{p1.cf_currency}\n{p1.cf_min}\n{p1.cf_max}")
        x = msg.exec_()

    def setupUi(self, MainMenu):
        MainMenu.setObjectName("MainMenu")
        MainMenu.setEnabled(True)
        MainMenu.resize(322, 550)
        font = QtGui.QFont()
        font.setFamily("Optima")
        self.centralwidget = QtWidgets.QWidget(MainMenu)
        self.centralwidget.setObjectName("centralwidget")
        self.Main_Menu = QtWidgets.QFrame(self.centralwidget)
        self.Main_Menu.setGeometry(QtCore.QRect(42, 60, 235, 390))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Main_Menu.sizePolicy().hasHeightForWidth())
        self.Main_Menu.setSizePolicy(sizePolicy)
        self.Main_Menu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Main_Menu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Main_Menu.setObjectName("Main_Menu")

        self.singleCoin = QtWidgets.QPushButton(self.Main_Menu)
        self.singleCoin.setGeometry(QtCore.QRect(20, 30, 191, 41))
        self.singleCoin.setFont(font)
        self.singleCoin.setObjectName("singleCoin")

        # Button pressed to open the single coin selection page and close the Main Menu
        self.singleCoin.clicked.connect(self.single_coin)

        self.multipleCoin = QtWidgets.QPushButton(self.Main_Menu)
        self.multipleCoin.setEnabled(True)
        self.multipleCoin.setGeometry(QtCore.QRect(20, 90, 191, 41))
        self.multipleCoin.setFont(font)
        self.multipleCoin.setObjectName("multipleCoin")

        # Button pressed to open the multiple coin selection page and close the Main Menu
        self.multipleCoin.clicked.connect(self.multiple_coin)

        self.coinList = QtWidgets.QPushButton(self.Main_Menu)
        self.coinList.setEnabled(True)
        self.coinList.setGeometry(QtCore.QRect(20, 150, 191, 41))
        self.coinList.setFont(font)
        self.coinList.setObjectName("coinList")

        # Button pressed to open coin list pop-up window
        self.coinList.clicked.connect(self.show_coinlist)

        self.setDetails = QtWidgets.QPushButton(self.Main_Menu)
        self.setDetails.setEnabled(True)
        self.setDetails.setGeometry(QtCore.QRect(20, 210, 191, 41))
        self.setDetails.setFont(font)
        self.setDetails.setObjectName("setDetails")

        # Buttons pressed to select access the set details page and close the Main Menu
        self.setDetails.clicked.connect(self.set_details)
        self.setDetails.clicked.connect(lambda:MainMenu.close())

        self.config = QtWidgets.QPushButton(self.Main_Menu)
        self.config.setEnabled(True)
        self.config.setGeometry(QtCore.QRect(20, 270, 191, 41))
        self.config.setFont(font)
        self.config.setObjectName("config")

        # Button pressed to open programme configuration pop-up window
        self.config.clicked.connect(self.show_config)

        self.exit = QtWidgets.QPushButton(self.Main_Menu)
        self.exit.setEnabled(True)
        self.exit.setGeometry(QtCore.QRect(20, 330, 191, 41))
        self.exit.setFont(font)
        self.exit.setObjectName("exit")

        # Press exit to terminate the programme
        self.exit.clicked.connect(lambda:MainMenu.close())

        MainMenu.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainMenu)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 316, 22))
        self.menubar.setObjectName("menubar")
        MainMenu.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainMenu)
        self.statusbar.setObjectName("statusbar")
        MainMenu.setStatusBar(self.statusbar)
        self.actionName = QtWidgets.QAction(MainMenu)
        self.actionName.setObjectName("actionName")
        self.actionSave = QtWidgets.QAction(MainMenu)
        self.actionSave.setObjectName("actionSave")
        self.actionCopy = QtWidgets.QAction(MainMenu)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(MainMenu)
        self.actionPaste.setObjectName("actionPaste")

        self.retranslateUi(MainMenu)
        QtCore.QMetaObject.connectSlotsByName(MainMenu)

    def retranslateUi(self, MainMenu):
        _translate = QtCore.QCoreApplication.translate
        MainMenu.setWindowTitle(_translate("MainMenu", "Capstone Group 6 - Coin Sorter"))
        self.singleCoin.setText(_translate("MainMenu", "Single Coin Calculator"))
        self.multipleCoin.setText(_translate("MainMenu", "Multiple Coin Calculator"))
        self.coinList.setText(_translate("MainMenu", "Print Coin List"))
        self.setDetails.setText(_translate("MainMenu", "Set Details"))
        self.config.setText(_translate("MainMenu", "Program Configuration"))
        self.exit.setText(_translate("MainMenu", "Exit"))
        self.actionName.setText(_translate("MainMenu", "New"))
        self.actionName.setStatusTip(_translate("MainMenu", "Create a new file"))
        self.actionName.setShortcut(_translate("MainMenu", "Ctrl+N"))
        self.actionSave.setText(_translate("MainMenu", "Save"))
        self.actionSave.setStatusTip(_translate("MainMenu", "Save the file"))
        self.actionSave.setShortcut(_translate("MainMenu", "Ctrl+S"))
        self.actionCopy.setText(_translate("MainMenu", "Copy"))
        self.actionCopy.setStatusTip(_translate("MainMenu", "Copy selection"))
        self.actionPaste.setText(_translate("MainMenu", "Paste"))
        self.actionPaste.setStatusTip(_translate("MainMenu", "Paste selection"))
        self.actionPaste.setShortcut(_translate("MainMenu", "Ctrl+V"))



# Single coin selection window
class Ui_SingleCoin(object):
    def setupUi(self, SingleCoin):
        SingleCoin.setObjectName("SingleCoin")
        SingleCoin.resize(425, 350)
        font = QtGui.QFont()
        font.setFamily("Optima")
        self.RadioButtonsFrame = QtWidgets.QFrame(SingleCoin)
        self.RadioButtonsFrame.setGeometry(QtCore.QRect(80, 130, 240, 220))
        self.RadioButtonsFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.RadioButtonsFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.RadioButtonsFrame.setObjectName("CheckButtonsFrame")
        self.twoPound = QtWidgets.QRadioButton(self.RadioButtonsFrame)
        self.twoPound.setGeometry(QtCore.QRect(20, 20, 161, 18))
        self.twoPound.setObjectName("twoPound")
        self.twoPound.toggled.connect(self.radiobutton_toggle)
        self.onePound = QtWidgets.QRadioButton(self.RadioButtonsFrame)
        self.onePound.setGeometry(QtCore.QRect(20, 50, 161, 18))
        self.onePound.setObjectName("onePound")
        self.onePound.toggled.connect(self.radiobutton_toggle)
        self.fiftyp = QtWidgets.QRadioButton(self.RadioButtonsFrame)
        self.fiftyp.setGeometry(QtCore.QRect(20, 80, 80, 18))
        self.fiftyp.setObjectName("fiftyp")
        self.fiftyp.toggled.connect(self.radiobutton_toggle)
        self.twentyp = QtWidgets.QRadioButton(self.RadioButtonsFrame)
        self.twentyp.setGeometry(QtCore.QRect(20, 110, 80, 18))
        self.twentyp.setObjectName("twentyp")
        self.twentyp.toggled.connect(self.radiobutton_toggle)
        self.tenp = QtWidgets.QRadioButton(self.RadioButtonsFrame)
        self.tenp.setGeometry(QtCore.QRect(20, 140, 80, 18))
        self.tenp.setObjectName("tenp")
        self.tenp.toggled.connect(self.radiobutton_toggle)
        self.buttonBox = QtWidgets.QDialogButtonBox(self.RadioButtonsFrame)
        self.buttonBox.setGeometry(QtCore.QRect(0, 170, 201, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.intro1 = QtWidgets.QLabel(SingleCoin)
        self.intro1.setGeometry(QtCore.QRect(10, 30, 500, 16))
        self.intro1.setFont(font)
        self.intro1.setObjectName("intro1")
        self.intro2 = QtWidgets.QLabel(SingleCoin)
        self.intro2.setGeometry(QtCore.QRect(10, 50, 500, 16))
        self.intro2.setFont(font)
        self.intro2.setObjectName("intro2")
        self.intro3 = QtWidgets.QLabel(SingleCoin)
        self.intro3.setGeometry(QtCore.QRect(10, 70, 500, 16))
        self.intro3.setFont(font)
        self.intro3.setObjectName("intro3")
        self.label_4 = QtWidgets.QLabel(SingleCoin)
        self.label_4.setFont(font)
        self.label_4.setGeometry(QtCore.QRect(10, 100, 430, 16))
        self.label_4.setObjectName("label_4")

        self.retranslateUi(SingleCoin)
        self.buttonBox.accepted.connect(SingleCoin.accept)
        self.buttonBox.rejected.connect(SingleCoin.reject)
        QtCore.QMetaObject.connectSlotsByName(SingleCoin)
        self.buttonBox.accepted.connect(self.select_amount)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(False)

    def select_amount(self):
        print(coin_dict["selection"])
        print(coin_dict["number"])
        coin_dict["number"]=[0,0,0,0,0]
        print(coin_dict["number"])
        p1.amount, okPressed = QInputDialog.getInt(MainMenu,"Single Coin Calc - Selection","Enter a value between 0p and 10000p:", 0, 0, 10000, 100)
        amount = p1.amount
        single_outcome=""
        single_outcome = f"From {amount}p, there are "
        if okPressed:
            for key, list in coin_dict.items():
                if key=="selection":
                    for count, select in enumerate(list):
                        if select==True:
                            p1.calc(coin_dict, count)
                            if coin_dict["number"][count]>0:
                                single_outcome += str(coin_dict["number"][count]) + " " + coin_dict["coin"][count] + " coin(s)"
            single_outcome+= f"\nand the amount remaining is {p1.remainder}p"
            if amount>0:
                self.amount_accepted_single(single_outcome)
            elif amount==0:
                self.amount_rejected_single()


    def amount_rejected_single(self):
        msg = QMessageBox()
        msg.setWindowTitle("Result")
        msg.setText("The amount remaining is 0p. \nIf this was an error, try again.\nEnter a value between 0p and 10000p")
        x = msg.exec_()

    def amount_accepted_single(self, outcome):
        msg = QMessageBox()
        msg.setWindowTitle("Results")
        msg.setText(outcome)
        x = msg.exec_()

    def radiobutton_toggle(self):
        if (self.twoPound.isChecked() or self.onePound.isChecked() or self.fiftyp.isChecked() or self.twentyp.isChecked() or self.tenp.isChecked()):
            self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(True)
            #counter+=1
        elif not (self.twoPound.isChecked() and self.onePound.isChecked() and self.fiftyp.isChecked() and self.twentyp.isChecked() and self.tenp.isChecked()):
            self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(False)
        if self.twoPound.isChecked():
            coin_dict["selection"][0] = True
        else:
            coin_dict["selection"][0] = False

        if self.onePound.isChecked():
            coin_dict["selection"][1] = True
        else:
            coin_dict["selection"][1] = False

        if self.fiftyp.isChecked():
            coin_dict["selection"][2] = True
        else:
            coin_dict["selection"][2] = False

        if self.twentyp.isChecked():
            coin_dict["selection"][3] = True
        else:
            coin_dict["selection"][3] = False
        if self.tenp.isChecked():
            coin_dict["selection"][4] = True
        else:
            coin_dict["selection"][4] = False

    def retranslateUi(self, SingleCoin):
        _translate = QtCore.QCoreApplication.translate
        SingleCoin.setWindowTitle(_translate("SingleCoin", "Single Coin Calculator"))
        self.twoPound.setText(_translate("SingleCoin", "£2 (equivalent to 200p)"))
        self.onePound.setText(_translate("SingleCoin", "£1 (equivalent to 100p)"))
        self.fiftyp.setText(_translate("SingleCoin", "50p"))
        self.twentyp.setText(_translate("SingleCoin", "20p"))
        self.tenp.setText(_translate("SingleCoin", "10p"))
        self.intro1.setText(_translate("SingleCoin", "In the Single Coin Calculator you have the option select one of the coins,"))
        self.intro2.setText(_translate("SingleCoin", "before being directed to a new window to enter in the amount that you"))
        self.intro3.setText(_translate("SingleCoin", "would like to convert."))
        self.label_4.setText(_translate("SingleCoin", "Select one of the options below and press enter to proceed."))

# Multiple coin selection window
class Ui_MultipleCoin(object):
    def setupUi(self, MultipleCoin):
        MultipleCoin.setObjectName("MultipleCoin")
        MultipleCoin.resize(480, 350)
        font = QtGui.QFont()
        font.setFamily("Optima")
        self.CheckButtonFrame = QtWidgets.QFrame(MultipleCoin)
        self.CheckButtonFrame.setGeometry(QtCore.QRect(120, 130, 220, 200))
        self.CheckButtonFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.CheckButtonFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.CheckButtonFrame.setObjectName("CheckButtonFrame")
        self.twoPound = QtWidgets.QCheckBox(self.CheckButtonFrame)
        self.twoPound.setGeometry(QtCore.QRect(20, 20, 161, 18))
        self.twoPound.setObjectName("twoPound")
        self.twoPound.toggled.connect(self.checkbox_toggle)
        self.onePound = QtWidgets.QCheckBox(self.CheckButtonFrame)
        self.onePound.setGeometry(QtCore.QRect(20, 50, 161, 18))
        self.onePound.setObjectName("onePound")
        self.onePound.toggled.connect(self.checkbox_toggle)
        self.fiftyp = QtWidgets.QCheckBox(self.CheckButtonFrame)
        self.fiftyp.setGeometry(QtCore.QRect(20, 80, 80, 18))
        self.fiftyp.setObjectName("fiftyp")
        self.fiftyp.toggled.connect(self.checkbox_toggle)
        self.twentyp = QtWidgets.QCheckBox(self.CheckButtonFrame)
        self.twentyp.setGeometry(QtCore.QRect(20, 110, 80, 18))
        self.twentyp.setObjectName("twentyp")
        self.twentyp.toggled.connect(self.checkbox_toggle)
        self.tenp = QtWidgets.QCheckBox(self.CheckButtonFrame)
        self.tenp.setGeometry(QtCore.QRect(20, 140, 80, 18))
        self.tenp.setObjectName("tenp")
        self.tenp.toggled.connect(self.checkbox_toggle)
        self.buttonBox = QtWidgets.QDialogButtonBox(self.CheckButtonFrame)
        self.buttonBox.setGeometry(QtCore.QRect(0, 170, 201, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.intro1 = QtWidgets.QLabel(MultipleCoin)
        self.intro1.setGeometry(QtCore.QRect(10, 30, 500, 16))
        self.intro1.setFont(font)
        self.intro1.setObjectName("intro1")
        self.intro2 = QtWidgets.QLabel(MultipleCoin)
        self.intro2.setGeometry(QtCore.QRect(10, 50, 500, 16))
        self.intro2.setFont(font)
        self.intro2.setObjectName("intro2")
        self.intro3 = QtWidgets.QLabel(MultipleCoin)
        self.intro3.setGeometry(QtCore.QRect(10, 70, 500, 16))
        self.intro3.setFont(font)
        self.intro3.setObjectName("intro3")
        self.label_4 = QtWidgets.QLabel(MultipleCoin)
        self.label_4.setGeometry(QtCore.QRect(10, 100, 430, 16))
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")

        self.retranslateUi(MultipleCoin)
        self.buttonBox.accepted.connect(MultipleCoin.accept)
        self.buttonBox.rejected.connect(MultipleCoin.reject)
        QtCore.QMetaObject.connectSlotsByName(MultipleCoin)
        #when button pressed select amount is activated
        self.buttonBox.accepted.connect(self.multi_select_amount)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(False)



    def multi_select_amount(self):
        print(coin_dict["selection"])
        print(coin_dict["number"])
        coin_dict["number"]=[0,0,0,0,0]

        p1.amount, okPressed = QInputDialog.getInt(MainMenu, "Multiple Coin Calc - Selection","Enter a value between 0p and 10000p:", 0, 0, 10000, 100)
        amount=p1.amount
        multi_outcome=[]
        outcome = f"From {amount}p, there are "
        if okPressed:
            print(p1.amount)
            for key, list in coin_dict.items():
                if key=="selection":
                    for count, select in enumerate(list):
                        if select==True:
                            p1.calc(coin_dict, count)
                            if coin_dict["number"][count]>0:
                                multi_outcome.append(str(coin_dict["number"][count]) + " " + coin_dict["coin"][count] + " coin(s), ")
            print(multi_outcome)
            for t in multi_outcome:
                outcome+= t
            outcome+= f"\nand the amount remaining is {p1.remainder}p"
            print(outcome)
        if amount>0:
            self.amount_accepted_multiple(outcome)
        elif amount==0:
            self.amount_rejected_multiple()


    def amount_accepted_multiple(self, outcome):
        msg = QMessageBox()
        msg.setWindowTitle("Results")
        msg.setText(outcome)
        x = msg.exec_()

    def amount_rejected_multiple(self):
        msg = QMessageBox()
        msg.setWindowTitle("Result")
        msg.setText("The amount remaining is 0p. \nIf this was an error, try again.\nEnter a value between 0p and 10000p")
        x = msg.exec_()

    def checkbox_toggle(self):
        if (self.twoPound.isChecked() or self.onePound.isChecked() or self.fiftyp.isChecked() or self.twentyp.isChecked() or self.tenp.isChecked()):
            self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(True)
            #counter+=1
        elif not (self.twoPound.isChecked() and self.onePound.isChecked() and self.fiftyp.isChecked() and self.twentyp.isChecked() and self.tenp.isChecked()):
            self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(False)

        if self.twoPound.isChecked():
            coin_dict["selection"][0] = True
        elif self.twoPound.isChecked()==False:
            coin_dict["selection"][0] = False

        if self.onePound.isChecked():
            coin_dict["selection"][1] = True
        else:
            coin_dict["selection"][1] = False

        if self.fiftyp.isChecked():
            coin_dict["selection"][2] = True
        else:
            coin_dict["selection"][2] = False

        if self.twentyp.isChecked():
            coin_dict["selection"][3] = True
        else:
            coin_dict["selection"][3] = False
        if self.tenp.isChecked():
            coin_dict["selection"][4] = True
        else:
            coin_dict["selection"][4] = False

    def retranslateUi(self, MultipleCoin):
        _translate = QtCore.QCoreApplication.translate
        MultipleCoin.setWindowTitle(_translate("MultipleCoin","Multiple Coin Calculator"))
        self.twoPound.setText(_translate("MultipleCoin", "£2 (equivalent to 200p)"))
        self.onePound.setText(_translate("MultipleCoin", "£1 (equivalent to 100p)"))
        self.fiftyp.setText(_translate("MultipleCoin", "50p"))
        self.twentyp.setText(_translate("MultipleCoin", "20p"))
        self.tenp.setText(_translate("MultipleCoin", "10p"))
        self.intro1.setText(_translate("MultipleCoin", "In the Multiple Coin Calculator you can select the coin denomination you desire,"))
        self.intro2.setText(_translate("MultipleCoin", "before being directed to a new window to enter in the amount that you would like"))
        self.intro3.setText(_translate("MultipleCoin", "to convert."))
        self.label_4.setText(_translate("MultipleCoin", "Select one of the options below and press enter (or select ok) to proceed."))

# Set details window
# Set details window
class Ui_SetDetails(object):
    # Set currency window
    def set_currency(self):
        msg = QMessageBox()
        msg.setWindowTitle("Set Currency")
        msg.setText(f"You have selected to change the currency.\nThe currency is currently set to {p1.currency}\nWould you like to change it?")
        msg.setIcon(QMessageBox.Question)
        msg.setStandardButtons(QMessageBox.Yes|QMessageBox.No)
        msg.setDefaultButton(QMessageBox.No)
        msg.setInformativeText("Click 'Show Details' for information on the currencies available")
        msg.setDetailedText("The currencies available are the following:\n GBP: British Pound Sterling (United Kingdom)\n MGA: Malagasy ariary (Madagascar)\n USD: US Dollar (United States)")
        msg.buttonClicked.connect(self.popup_button1)
        x = msg.exec_()

    #used to find out what button was pressed in the message box above, directs user to change currency when the Yes button is pressed in set currency
    def popup_button1(self, i):
        if i.text()=="&Yes":
            self.change_currency()

    def change_currency(self):
        items = ("GBP","MGA","USD")
        p1.currency, okPressed = QInputDialog.getItem(MainMenu, "Change the currency","Which currency would you like to select?", items, 0, False)
        if okPressed and p1.currency:
            self.currency_changed(p1.currency)

    #informs user that no changes will take effect after changing the currency
    def currency_changed(self, currency):
        msg = QMessageBox()
        msg.setWindowTitle("Error: Permission denied")
        msg.setText(f"Thank You! You have selected {currency} as your currency.\
        \nHowever you have no been granted permissions to change the settings.")
        msg.setIcon(QMessageBox.Critical)
        msg.setInformativeText("You will now be directed to the Set Details Menu")
        x = msg.exec_()

    # Set minimum input window
    def set_minimum(self):
        msg = QMessageBox()
        msg.setWindowTitle("Set Minimum")
        msg.setText(f"The current minimum input is set to {p1.min_Coin}p GBP.\nWould you like to change it?")
        msg.setIcon(QMessageBox.Question)
        msg.setStandardButtons(QMessageBox.Yes|QMessageBox.No)
        msg.setDefaultButton(QMessageBox.No)
        msg.buttonClicked.connect(self.popup_button2)
        y = msg.exec_()


    #used to find out what button was pressed in the message box above, directs user to change minimum input box when Yes is selected in set minimum message box
    def popup_button2(self, j):
        if j.text()=="&Yes":
            self.change_minimum()

    #integer input pop up box to get to enter a new minimum value
    def change_minimum(self):
        min_input, okPressed = QInputDialog.getInt(MainMenu,"Change minimum amount",f"You have selected to change the minimum input value.\nThe current minimum input is set to {p1.min_Coin}p.\n Enter a new value: ", 0, 0, 1000000, 10)
        if min_input:
            self.min_changed(min_input)

    #message box used to let user know that changes won't be made
    def min_changed(self, min_input):
        msg = QMessageBox()
        msg.setWindowTitle("Error: Permission denied")
        msg.setText(f"Unfortunately you don't have permission to change the value from {p1.min_Coin}p to {min_input}p.")
        msg.setIcon(QMessageBox.Critical)
        msg.setInformativeText("You will now be directed to the Set Details Menu")
        x = msg.exec_()




    # Set maximum input window
    def set_maximum(self):
        msg = QMessageBox()
        msg.setWindowTitle("Set maximum")
        msg.setText(f"The current maximum input is set to {p1.max_Coin}p GBP.\nWould you like to change it?")
        msg.setIcon(QMessageBox.Question)
        msg.setStandardButtons(QMessageBox.Yes|QMessageBox.No)
        msg.setDefaultButton(QMessageBox.No)
        msg.buttonClicked.connect(self.popup_button3)
        y = msg.exec_()

    #used to find out what button was pressed in the message box above, directs user to change maximum input box when Yes is selected in set maximum message box
    def popup_button3(self, k):
        if k.text()=="&Yes":
            self.change_maximum()

    #integer input pop up box to get to enter a new maximum value
    def change_maximum(self):
        max_input, okPressed = QInputDialog.getInt(MainMenu,"Change maximum amount",f"You have selected to change the maximum input value.\nThe current maximum input is set to {p1.max_Coin}p.\n Enter a new value: ", 0, 0, 1000000, 10)
        if max_input:
            self.max_changed(max_input)

    #message box used to let user know that changes won't be made
    def max_changed(self, max_input):
        msg = QMessageBox()
        msg.setWindowTitle("Error: Permission denied")
        msg.setText(f"Unfortunately you don't have permission to change the value from {p1.max_Coin}p to {max_input}p.")
        msg.setIcon(QMessageBox.Critical)
        msg.setInformativeText("You will now be directed to the Set Details Menu")
        x = msg.exec_()

    # Return to the main menu
    def main_menu(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MainMenu()
        self.ui.setupUi(self.window)
        self.window.show()
        
    def setupUi(self, SetDetails):
        SetDetails.setObjectName("SetDetails")
        SetDetails.setEnabled(True)
        SetDetails.resize(295, 370)
        font = QtGui.QFont()
        font.setFamily("Optima")
        self.centralwidget = QtWidgets.QWidget(SetDetails)
        self.centralwidget.setObjectName("centralwidget")
        self.SubMenu = QtWidgets.QFrame(self.centralwidget)
        self.SubMenu.setGeometry(QtCore.QRect(30, 20, 235, 300))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(250)
        sizePolicy.setVerticalStretch(250)
        sizePolicy.setHeightForWidth(self.SubMenu.sizePolicy().hasHeightForWidth())

        self.SubMenu.setSizePolicy(sizePolicy)
        self.SubMenu.setMinimumSize(QtCore.QSize(0, 0))
        self.SubMenu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.SubMenu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.SubMenu.setObjectName("SubMenu")

        self.SetCurrency = QtWidgets.QPushButton(self.SubMenu)
        self.SetCurrency.setGeometry(QtCore.QRect(20, 40, 191, 41))
        self.SetCurrency.setFont(font)
        self.SetCurrency.setObjectName("Set Currency")

        # Set currency button is pressed and set details window is closed
        self.SetCurrency.clicked.connect(self.set_currency)

        self.SetMinimum = QtWidgets.QPushButton(self.SubMenu)
        self.SetMinimum.setEnabled(True)
        self.SetMinimum.setGeometry(QtCore.QRect(20, 100, 191, 41))
        self.SetMinimum.setFont(font)
        self.SetMinimum.setObjectName("SetMinimum")

        # Set minimum button is pressed and set details window is closed
        self.SetMinimum.clicked.connect(self.set_minimum)

        self.SetMaximum = QtWidgets.QPushButton(self.SubMenu)
        self.SetMaximum.setEnabled(True)
        self.SetMaximum.setGeometry(QtCore.QRect(20, 160, 191, 41))
        self.SetMaximum.setFont(font)
        self.SetMaximum.setObjectName("SetMaximum")

        # Set maximum button is pressed and set details window is closed
        self.SetMaximum.clicked.connect(self.set_maximum)

        self.MainMenu = QtWidgets.QPushButton(self.SubMenu)
        self.MainMenu.setEnabled(True)
        self.MainMenu.setGeometry(QtCore.QRect(20, 220, 191, 41))
        self.MainMenu.setFont(font)
        self.MainMenu.setObjectName("MainMenu")

        #return to menu button is pressed and set details window is closed
        self.MainMenu.clicked.connect(self.main_menu)
        self.MainMenu.clicked.connect(lambda:SetDetails.close())

        SetDetails.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(SetDetails)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 289, 22))
        self.menubar.setObjectName("menubar")
        SetDetails.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(SetDetails)
        self.statusbar.setObjectName("statusbar")
        SetDetails.setStatusBar(self.statusbar)

        self.retranslateUi(SetDetails)
        QtCore.QMetaObject.connectSlotsByName(SetDetails)

    def retranslateUi(self, SetDetails):
        _translate = QtCore.QCoreApplication.translate
        SetDetails.setWindowTitle(_translate("SetDetails", "Set Details"))
        self.SetCurrency.setText(_translate("SetDetails", "Set Currency"))
        self.SetMinimum.setText(_translate("SetDetails", "Set Minimum Input"))
        self.SetMaximum.setText(_translate("SetDetails", "Set Maximum Input"))
        self.MainMenu.setText(_translate("SetDetails", "Return to Main Menu"))

if __name__ == "__main__":
    import sys
    twoPound = False
    onePound = False
    fiftyp = False
    twentyp = False
    tenp = False
    coin_dict={"selection": [twoPound, onePound, fiftyp, twentyp, tenp],
    "value":[200,100,50,20,10],
    "number":[0,0,0,0,0],
    "coin":["£2","£1","50p","20p","10p"],
    "coin_selector": [" - £2 (equivalent to 200p)"," - £1 (equivalent to 100p)"," - 50p"," - 20p"," - 10p", " - Go back to main menu"],
    "counter": [1,2,3,4,5,6]}
    app = QtWidgets.QApplication(sys.argv)
    MainMenu = QtWidgets.QMainWindow()
    ui = Ui_MainMenu()
    ui.setupUi(MainMenu)
    MainMenu.show()
    sys.exit(app.exec_())
